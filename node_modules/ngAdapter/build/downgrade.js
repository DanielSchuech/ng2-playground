"use strict";
var helper_1 = require('./helper');
var Downgrade = (function () {
    function Downgrade(upgradeAdapter, module) {
        this.upgradeAdapter = upgradeAdapter;
        this.module = module;
    }
    Downgrade.prototype.directive = function (directive) {
        var metadata = this.getMetadata(directive);
        // initialise provided services
        this.downgradeProviders(metadata.providers);
        var scope = this.createNewScopeWithBindings(directive);
        //TODO: require other directives on the same element
        // create directive function
        function ng1Directive($injector) {
            return {
                scope: scope,
                link: function (scope, element, attrs) {
                    var el = {
                        nativeElement: element[0]
                    };
                    // derivate dependencies
                    var deps = getDependencies(directive, el, $injector);
                    // combine scope and prototype functions
                    var prototypes = Object.keys(directive.prototype);
                    prototypes.forEach(function (prototypeKey) {
                        scope[prototypeKey] = directive.prototype[prototypeKey];
                    });
                    //create Directive
                    directive.apply(scope, deps);
                    addHostsBinding(metadata, element[0], scope);
                }
            };
        }
        return ng1Directive;
    };
    /**
     * returns Metadata of the Directive
     * i.e. selector, providers, host, ...
     */
    Downgrade.prototype.getMetadata = function (directive) {
        var metadata = Reflect.getOwnMetadata('annotations', directive)[0];
        if (!metadata) {
            console.log('Error on finding metadata for directive: ' + helper_1.getFunctionName(directive));
            throw new Error();
        }
        return metadata;
    };
    /**
     * downgrade provided services which are given in the Directive Metadata
     */
    Downgrade.prototype.downgradeProviders = function (providers) {
        var _this = this;
        providers && providers.forEach(function (provider) {
            _this.upgradeAdapter.addProvider(provider);
            _this.module.factory(helper_1.getFunctionName(provider), _this.upgradeAdapter.downgradeNg2Provider(provider));
        });
    };
    /**
     * create an empty scope with two way binding of the ng2 directive
     */
    Downgrade.prototype.createNewScopeWithBindings = function (directive) {
        var bindings = Reflect.getOwnMetadata('propMetadata', directive);
        if (!bindings) {
            return {};
        }
        var bindingKeys = Object.keys(bindings);
        var scope = {};
        bindingKeys.forEach(function (key) {
            scope[key] = '=';
        });
        return scope;
    };
    return Downgrade;
}());
exports.Downgrade = Downgrade;
/**
 * evaluate the dependencies of the given ng2 directive
 * returns the instances of the deps in correct order
 */
function getDependencies(directive, el, $injector) {
    var deps = [];
    var params = Reflect.getMetadata('design:paramtypes', directive);
    params && params.forEach(function (dep) {
        var dependencyName = helper_1.getFunctionName(dep);
        // ElementRef is a special case 
        if (dependencyName === 'ElementRef') {
            deps.push(el);
            return;
        }
        // default case
        var dependency = $injector.get(dependencyName);
        deps.push(dependency);
    });
    return deps;
}
/**
 * adds the event bindings given in the host attribute of the directive metadata
 */
function addHostsBinding(metadata, element, directiveScope) {
    var hostKeys = Object.keys(metadata.host || {});
    hostKeys && hostKeys.forEach(function (key) {
        var keyReg = /([A-Z,a-z,0-9]+)/;
        var event = keyReg.exec(key)[0];
        var fnReg = /([A-Z,a-z,0-9]+)/;
        var fnName = fnReg.exec(metadata.host[key])[0];
        element.addEventListener(event, function () {
            directiveScope[fnName]();
        });
    });
    //TODO: remove event listener on directive destroy
}
//# sourceMappingURL=downgrade.js.map